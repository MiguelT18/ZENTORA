services:
  nginx:
    build:
      context: ./infra/docker/nginx
      dockerfile: Dockerfile
    container_name: zentora-nginx
    ports:
      - "0.0.0.0:80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - zentora-network

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: ../../infra/docker/frontend/Dockerfile
    container_name: zentora-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    restart: unless-stopped
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - zentora-network

  backend:
    build:
      context: ./apps/backend
      dockerfile: ../../infra/docker/backend/Dockerfile
    container_name: zentora-backend
    expose:
      - "8000"
    volumes:
      - ./apps/backend:/app
      - ./apps/backend/.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - zentora-network

  postgres:
    image: postgres:16-alpine
    container_name: zentora-postgres
    ports:
      - "0.0.0.0:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=zentora
      - POSTGRES_PASSWORD=zentora
      - POSTGRES_DB=zentora_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zentora -d zentora_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - zentora-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: zentora-pgadmin
    ports:
      - "0.0.0.0:5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@zentora.com
      - PGADMIN_DEFAULT_PASSWORD=zentora
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - zentora-network

  redis:
    image: redis:7-alpine
    container_name: zentora-redis
    ports:
      - "0.0.0.0:6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - zentora-network

  redisinsight:
    image: redis/redisinsight:latest
    container_name: zentora-redisinsight
    ports:
      - "0.0.0.0:5540:5540"
    volumes:
      - redisinsight:/db
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - zentora-network

networks:
  zentora-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  redis_data:
  redisinsight:
